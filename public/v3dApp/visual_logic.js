/**
 * Generated by Verge3D Puzzles v.3.7.1
 * Thu Sep 23 2021 17:42:59 GMT-0500 (hora estándar de Perú)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}




// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = false;
_initGlob.output.initOptions.useBkgTransp = true;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'percentage', false);
  setHTMLElemAttribute('style', ['stroke-dashoffset: ',472 - (472 * Math.round(_initGlob.percentage)) / 100,';'].join(''), 'circle', false);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', false);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["VerifcarIconoStand"] = VerifcarIconoStand;

var PROC = {
    "VerifcarIconoStand": VerifcarIconoStand,
};

var isZoom, pdf, ColorOBject, input_range_start, input_range_end, result_range_start, result_range_end, input_value, navigationFPS, j, OpenMap, JsonUrls, picked_object, music, camera_y, touch_1_busy, result_range, output_value, PositionsOfCameras, nameUrlPlus, isPlay, is_music_play, maxBreakingForce_multiplier, video, camera_x, game_started, touch_1_base_y, touch_1_y_length, maxBreakingForce, actions, summ_damage;


function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    setPlaybackTime: function(time) {
        this.source.currentTime = time
    },

    getPlaybackTime: function() {
        return this.source.currentTime;
    },

    setPlaybackRate: function(rate) {
        this.source.playbackRate = rate;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});



// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}



// callJSFunction puzzle
function getJSFunction(funcName) {
    var jsFunc = appInstance.ExternalInterface[funcName];
    if (typeof jsFunc == "function")
        return jsFunc;
    else
        return function() {};
}



// loadVideo puzzle
function loadVideo(url) {
    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url, true);
    }
    return elems[url];
}



/**
 * Retreive standard accessible textures for MeshNodeMaterial or MeshStandardMaterial.
 * If "collectSameNameMats" is true then all materials in the scene with the given name will
 * be used for collecting textures, otherwise will be used only the first found material (default behavior).
 */
function matGetEditableTextures(matName, collectSameNameMats) {

    var mats = [];
    if (collectSameNameMats) {
        mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
    } else {
        var firstMat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (firstMat !== null) {
            mats = [firstMat];
        }
    }

    var textures = mats.reduce(function(texArray, mat) {
        var matTextures = [];
        switch (mat.type) {
            case 'MeshNodeMaterial':
                matTextures = Object.values(mat.nodeTextures);
                break;

            case 'MeshStandardMaterial':
                matTextures = [
                    mat.map, mat.lightMap, mat.aoMap, mat.emissiveMap,
                    mat.bumpMap, mat.normalMap, mat.displacementMap,
                    mat.roughnessMap, mat.metalnessMap, mat.alphaMap, mat.envMap
                ]
                break;

            default:
                console.error('matGetEditableTextures: Unknown material type ' + mat.type);
                break;
        }

        Array.prototype.push.apply(texArray, matTextures);
        return texArray;
    }, []);

    return textures.filter(function(elem) {
        // check Texture type exactly
        return elem && (elem.constructor == v3d.Texture
                || elem.constructor == v3d.DataTexture
                || elem.constructor == v3d.VideoTexture);
    });
}



/**
 * Replace accessible textures for MeshNodeMaterial or MeshStandardMaterial
 */
function matReplaceEditableTexture(mat, oldTex, newTex) {

    switch (mat.type) {
        case 'MeshNodeMaterial':
            for (var name in mat.nodeTextures) {
                if (mat.nodeTextures[name] == oldTex) {
                    mat.nodeTextures[name] = newTex;
                }
            }

            break;

        case 'MeshStandardMaterial':

            var texNames = ['map', 'lightMap', 'aoMap', 'emissiveMap',
                            'bumpMap', 'normalMap', 'displacementMap', 'roughnessMap',
                            'metalnessMap', 'alphaMap', 'envMap'];

            texNames.forEach(function(name) {
                if (mat[name] == oldTex) {
                    mat[name] = newTex;
                }
            });

            break;

        default:
            console.error('matReplaceEditableTexture: Unsupported material type ' + mat.type);
            break;
    }

    // inherit some save params
    newTex.encoding = oldTex.encoding;
    newTex.wrapS = oldTex.wrapS;
    newTex.wrapT = oldTex.wrapT;

}



// replaceTexture puzzle
function replaceTexture(matName, texName, texUrlOrElem, doCb) {

    var textures = matGetEditableTextures(matName, true).filter(function(elem) {
        return elem.name == texName;
    });

    if (!textures.length)
        return;

    if (texUrlOrElem instanceof Promise) {

        texUrlOrElem.then(function(response) {
           processImageUrl(response);
        }, function(error) {});

    } else if (typeof texUrlOrElem == 'string') {

        processImageUrl(texUrlOrElem);

    /**
     * NOTE: not checking for the MediaHTML5 constructor, because otherwise this
     * puzzle would always provide the code that's not needed most of the time
     */
    } else if (texUrlOrElem instanceof Object && texUrlOrElem.source
            instanceof HTMLVideoElement) {

        processVideo(texUrlOrElem.source);

    } else if (texUrlOrElem instanceof HTMLCanvasElement) {

        processCanvas(texUrlOrElem);

    } else {

        return;

    }

    function processImageUrl(url) {

        var isHDR = (url.search(/\.hdr$/) > 0);

        if (!isHDR) {
            var loader = new v3d.ImageLoader();
            loader.setCrossOrigin('Anonymous');
        } else {
            var loader = new v3d.FileLoader();
            loader.setResponseType('arraybuffer');
        }

        loader.load(url, function(image) {
            // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
            var isJPEG = url.search(/\.(jpg|jpeg)$/) > 0 || url.search(/^data\:image\/jpeg/) === 0;

            textures.forEach(function(elem) {

                if (!isHDR) {
                    elem.image = image;
                } else {
                    // parse loaded HDR buffer
                    var rgbeLoader = new v3d.RGBELoader();
                    var texData = rgbeLoader.parse(image);

                    // NOTE: reset params since the texture may be converted to float
                    elem.type = v3d.UnsignedByteType;
                    elem.encoding = v3d.RGBEEncoding;

                    elem.image = {
                        data: texData.data,
                        width: texData.width,
                        height: texData.height
                    }

                    elem.magFilter = v3d.LinearFilter;
                    elem.minFilter = v3d.LinearFilter;
                    elem.generateMipmaps = false;
                    elem.isDataTexture = true;

                }

                elem.format = isJPEG ? v3d.RGBFormat : v3d.RGBAFormat;
                elem.needsUpdate = true;

                // update world material if it is using this texture
                if (appInstance.scene !== null && appInstance.scene.worldMaterial !== null) {
                    var wMat = appInstance.scene.worldMaterial;
                    for (var texName in wMat.nodeTextures) {
                        if (wMat.nodeTextures[texName] == elem) {
                            appInstance.updateEnvironment(wMat);
                        }
                    }
                }
            });

            // exec once
            doCb();

        });
    }

    function processVideo(elem) {
        var videoTex = new v3d.VideoTexture(elem);
        videoTex.flipY = false;
        videoTex.name = texName;

        var videoAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, videoTex);
            });

            mat.needsUpdate = true;
            videoAssigned = true;
        });

        if (videoAssigned)
            doCb();

    }

    function processCanvas(elem) {
        var canvasTex = new v3d.CanvasTexture(elem);
        canvasTex.flipY = false;
        canvasTex.name = texName;

        var canvasAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, canvasTex);
            });

            mat.needsUpdate = true;
            canvasAssigned = true;
        });

        if (canvasAssigned) {

            if (v3d.PL) {
                v3d.PL.canvasTextures = v3d.PL.canvasTextures || {};
                v3d.PL.canvasTextures[canvasTex.image.id] = canvasTex;
            }

            doCb();
        }

    }
}



// pauseSound puzzle
function pauseSound(mediaElem) {
    if (!mediaElem)
        return;
    mediaElem.pause();
}



// playSound puzzle
function playSound(mediaElem, loop) {
    if (!mediaElem)
        return;
    mediaElem.setLoop(loop);
    mediaElem.play();
}



// waitPromise puzzle
_pGlob.promiseValue = '';

function waitPromise(promise, onFulfilled, onRejected) {

    if (promise) {

        promise.then(function(value) {

            window.pv = value;
            _pGlob.promiseValue = value;
            onFulfilled();

        }, function(reason) {

            _pGlob.promiseValue = reason;
            onRejected();

        });

    } else {

        _pGlob.promiseValue = 'Incorrect promise value';
        onRejected();

    }
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}



// setActiveCamera puzzle
function setActiveCamera(camName) {
    var camera = getObjectByName(camName);
    if (!camera || !camera.isCamera || appInstance.getCamera() == camera)
        return;
    appInstance.setCamera(camera);
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.v3d.puzzles === undefined) {
            obj.userData.v3d.puzzles = {}
        }
        if (obj.userData.v3d.puzzles.rotationInterface === undefined) {
            obj.userData.v3d.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.v3d.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});




// getObjTransform puzzle
function getObjTransform(objName, mode, coord) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;

    var coordSystem = getCoordSystem();

    var transformVal;

    if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
        transformVal = eulerV3DToBlenderShortest(obj.rotation,
                _pGlob.eulerTmp);
    } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);
    } else {
        transformVal = coordsTransform(obj[mode].clone(), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
    }

    if (mode === 'rotation') {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
    }

    if (coord == 'xyz') {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
    } else {
        return transformVal[coord];
    }
}



// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj){
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}



// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName){
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}



// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames(){
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}



// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function getObjectNamesByGroupName(targetGroupName){
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}



// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames){
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}



function retrieveObjectNamesAcc(currObjNames, acc){
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}



// utility function used by the whenClicked2 puzzles
function initObjectPicking2(callback, eventType, mouseDownUseTouchStart, mouseButtons, delay){
    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mouseup') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    var timeDelta;
    elem.addEventListener('mousedown', timeDeltaStart)
    elem.addEventListener('touchstart', timeDeltaStart)

    function timeDeltaStart(){
        timeDelta = appInstance.clock.elapsedTime;
    }

    function pickListener(event) {
        timeDelta = appInstance.clock.elapsedTime - timeDelta;
        if(timeDelta > delay) return;

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }

}



function objectsIncludeObj(objNames, testedObjName){
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}



// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj){
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem(){
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}



/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange){

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}



/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender s behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }
}();



function initGetCameraDirection(currObjNames, acc){
    var coordsCallback = function(event) {
        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
    }

    var elem = appInstance.container;
    elem.addEventListener('mousemove', coordsCallback);
    elem.addEventListener('mousedown', coordsCallback);
    elem.addEventListener('mouseup', coordsCallback);
    elem.addEventListener('touchstart', coordsCallback);
    elem.addEventListener('touchend', coordsCallback);

}



initGetCameraDirection();

// getCameraDirection2 puzzle
var getCameraDirection2 = function() {

    var coords = new v3d.Vector2();
    var raycaster = new v3d.Raycaster();
    var vec = new v3d.Vector3();

    return function getCameraDirection2(useMouseTouch, inverted) {
        var camera = appInstance.camera;

        if (useMouseTouch) {

            if (inverted) {
                coords.x = -_pGlob.screenCoords.x;
                coords.y = -_pGlob.screenCoords.y;
            } else {
                coords.x = _pGlob.screenCoords.x;
                coords.y = _pGlob.screenCoords.y;
            }

            raycaster.setFromCamera(coords, camera);
            var dir = raycaster.ray.direction;

        } else {
            var dir = camera.getWorldDirection(vec);
        }

        return dir;
    }
}();



// teleportCamera puzzle
function teleportCamera(gazeLevel, movementType, duration, doSlot){

    var worldPos, worldTarget;
    if (!_pGlob.pickedPoint) {
        return;
    }
    worldPos = new v3d.Vector3().copy(_pGlob.pickedPoint);
    worldPos.setY(gazeLevel);

    var camDir = getCameraDirection2(true, false);
    worldTarget = new v3d.Vector3().addVectors(worldPos, camDir);

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot, movementType == 'LINEAR' ? 0 : 1);
        }
    } else {
        // TODO: static camera, just position it for now
        if (appInstance.camera.parent) {
            appInstance.camera.parent.worldToLocal(worldPos);
        }
        appInstance.camera.position.copy(worldPos);
        appInstance.camera.lookAt(worldTarget);
        doSlot();
    }

}



function registerOnClick2(prop){
    const {objSelector, xRay, doubleClick, mouseButtons, delay, cbDo, cbIfMissedDo} = prop;

    const mouseBtns = mouseButtons.split(',').filter(item => item.length != 0).map(item => Number(item));

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking2(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);
            // save the point and normal for the pickedObject2 block
            _pGlob.pickedPoint = intersects[i].point;
            _pGlob.pickedNormal = intersects[i].face ? intersects[i].face.normal : null;

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject2 = objName;
                isPicked = true;
                cbDo(event);
            }

        }

        if (!isPicked) {
            _pGlob.pickedObject2 = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mouseup', false, mouseBtns, delay);
}



// setObjTransform puzzle
function setObjTransform(objSelector, mode, x, y, z, offset) {

    var objNames = retrieveObjectNames(objSelector);

    function setObjProp(obj, prop, val) {
        if (!offset) {
            obj[mode][prop] = val;
        } else {
            if (mode != "scale")
                obj[mode][prop] += val;
            else
                obj[mode][prop] *= val;
        }
    }

    var inputsUsed = _pGlob.vec3Tmp.set(Number(x !== ''), Number(y !== ''),
            Number(z !== ''));
    var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

    if (mode === 'rotation') {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.Math.DEG2RAD);
    }

    var coordSystem = getCoordSystem();

    coordsTransform(inputsUsed, coordSystem, 'Y_UP_RIGHT', true);
    coordsTransform(coords, coordSystem, 'Y_UP_RIGHT', mode === 'scale');

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
            // Blender/Max coordinates

            // need all the rotations for order conversions, especially if some
            // inputs are not specified
            var euler = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
            coordsTransform(euler, coordSystem, 'Y_UP_RIGHT');

            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            /**
             * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
             * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
             */
            euler.order = "YZX";
            euler.reorder(obj.rotation.order);
            obj.rotation.copy(euler);

        } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
            // Maya coordinates

            // Use separate rotation interface to fix ambiguous rotations for Maya,
            // might as well do the same for Blender/Max.

            var rotUI = RotationInterface.initObject(obj);
            var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
            // TODO(ivan): this probably needs some reasonable wrapping
            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            rotUI.setUserRotation(euler);
            rotUI.getActualRotation(obj.rotation);
        } else {

            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

        }

        obj.updateMatrixWorld(true);
    }

}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



// whenHovered puzzle
initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(retrieveObjectNames(el.objSelector), objName) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(retrieveObjectNames(el.objSelector), currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove', false);



// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}



function matGetColors(matName) {
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeRGBMap);
    else if (mat.isMeshStandardMaterial)
        return ['color', 'emissive'];
    else
        return [];
}



// setMaterialColor puzzle
function setMaterialColor(matName, colName, r, g, b, cssCode) {

    var colors = matGetColors(matName);

    if (colors.indexOf(colName) < 0)
        return;

    if (cssCode) {
        var color = new v3d.Color(cssCode);
        color.convertSRGBToLinear();
        r = color.r;
        g = color.g;
        b = color.b;
    }

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var rgbIdx = mat.nodeRGBMap[colName];
            mat.nodeRGB[rgbIdx].x = r;
            mat.nodeRGB[rgbIdx].y = g;
            mat.nodeRGB[rgbIdx].z = b;
        } else {
            mat[colName].r = r;
            mat[colName].g = g;
            mat[colName].b = b;
        }
        mat.needsUpdate = true;

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}



// setInterval puzzle
function registerInterval(timeout, callback) {
    var timerId = window.setInterval(function() { callback(timerId) }, 1000 * timeout);
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}



// dictGet puzzle
function dictGet(dict, key) {
    if (dict && typeof dict == 'object')
        return dict[key];
}



// openWebPage puzzle
function openWebPage(url, mode) {

    if (appInstance && appInstance.controls) {
        appInstance.controls.forceMouseUp();
    }

    if (mode == "NEW") {
        window.open(url);
    } else if (mode == "NO_RELOAD") {
        history.pushState('verge3d state', 'verge3d page', url);
    } else {
        var target;
        switch (mode) {
            case "SAME":
                target = "_self";
                break;
            case "TOP":
                target = "_top";
                break;
            case "PARENT":
                target = "_parent";
                break;
        }
        if (typeof window.PE != "undefined") {
            if (window.confirm("Are you sure you want to leave Puzzles?"))
                window.open(url, target);
        } else {
            window.open(url, target);
        }
    }
}


// Describe this function...
function VerifcarIconoStand(picked_object) {
  nameUrlPlus = String(picked_object.slice(-2)[0]) + String(picked_object.slice(-1)[0]);
  if (picked_object == 'fb_0' + String(nameUrlPlus)) {
    openWebPage(dictGet(JsonUrls[nameUrlPlus - 1], 'UrlFacebook'), 'NEW');
  } else if (picked_object == 'Linkedin_0' + String(nameUrlPlus)) {
    openWebPage(dictGet(JsonUrls[nameUrlPlus - 1], 'URlLinkend'), 'NEW');
  } else if (picked_object == 'twitter_0' + String(nameUrlPlus)) {
    openWebPage(dictGet(JsonUrls[nameUrlPlus - 1], 'UrlTwiter'), 'NEW');
  } else if (picked_object == 'whats_0' + String(nameUrlPlus)) {
    openWebPage(dictGet(JsonUrls[nameUrlPlus - 1], 'UrlWhatsap'), 'NEW');
  } else if (picked_object == 'pdf_0' + String(nameUrlPlus)) {
    getJSFunction('GetPickerPdf')(true, nameUrlPlus);
  } else if (picked_object == 'tv_s_0' + String(nameUrlPlus)) {
    getJSFunction('getVideo')(true, nameUrlPlus);
  } else if (picked_object == 'img_0' + String(nameUrlPlus)) {
    getJSFunction('GetPickerImg')(true, nameUrlPlus);
  } else if (picked_object == 'css_pos_6x10_v2_0' + String(nameUrlPlus)) {
    getJSFunction('getShowRRom')(true, nameUrlPlus);
  } else if (picked_object == 'xls_0' + String(nameUrlPlus)) {
    getJSFunction('GetShowXLS')(true, nameUrlPlus);
  }
  if (picked_object == 'share_0' + String(nameUrlPlus)) {

    operateAnimation('SET_FRAME', 'share_0' + String(nameUrlPlus), 0, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('PLAY', 'share_0' + String(nameUrlPlus), 60, 80, 'LoopOnce', 1,
            function() {

      operateAnimation('PLAY', 'Linkedin_0' + String(nameUrlPlus), 80, 190, 'AUTO', 1,
              function() {}, undefined, false);


      operateAnimation('PLAY', 'fb_0' + String(nameUrlPlus), 80, 190, 'AUTO', 1,
              function() {}, undefined, false);


      operateAnimation('PLAY', 'twitter_0' + String(nameUrlPlus), 80, 190, 'AUTO', 1,
              function() {}, undefined, false);


      operateAnimation('PLAY', 'whats_0' + String(nameUrlPlus), 80, 190, 'AUTO', 1,
              function() {}, undefined, false);

          }, undefined, false);

        }
}


isZoom = true;
music = loadMedia_HTML5('https://res.cloudinary.com/yurand/video/upload/v1629724079/Brawl_Stars_Music_Video__Bad_Randoms_-_We_Won_t_Cooperate_bubdst.mp3');
isPlay = false;
is_music_play = false;
registerOnClick('Plane.077', false, false, [0,1,2], function() {
  waitPromise(getJSFunction('getVideo')(), function() {
    console.log(_pGlob.promiseValue);
    video = loadVideo(_pGlob.promiseValue);
    replaceTexture('monitor', 'pantalla.jpg', video, function() {});
    if (isPlay) {
      pauseSound(video);
      isPlay = false;
    } else {
      playSound(video, true);
      isPlay = true;
    }
  }, function() {});
}, function() {});

setActiveCamera('cam_pos_1');

registerOnClick('Plane.072', false, false, [0,1,2], function() {
  if (is_music_play) {
    pauseSound(music);
    is_music_play = false;
  } else {
    playSound(music, false);
    is_music_play = true;
  }
}, function() {});

camera_y = getObjTransform('cam_zoom', 'position', 'y');
camera_y = getObjTransform('cam_zoom', 'position', 'z');

/* Set color picker on screen */

navigationFPS = false;

console.log('Hello, Verge!');
PositionsOfCameras = [[getObjTransform('cam_pos_1', 'position', 'x'), getObjTransform('cam_pos_1', 'position', 'y'), getObjTransform('cam_pos_1', 'position', 'z')], [getObjTransform('cam_pos_2', 'position', 'x'), getObjTransform('cam_pos_2', 'position', 'y'), getObjTransform('cam_pos_2', 'position', 'z')], [getObjTransform('cam_pos_3', 'position', 'x'), getObjTransform('cam_pos_3', 'position', 'y'), getObjTransform('cam_pos_3', 'position', 'z')], [getObjTransform('cam_pos_4', 'position', 'x'), getObjTransform('cam_pos_4', 'position', 'y'), getObjTransform('cam_pos_4', 'position', 'z')], [getObjTransform('cam_pos_5', 'position', 'x'), getObjTransform('cam_pos_5', 'position', 'y'), getObjTransform('cam_pos_5', 'position', 'z')], [getObjTransform('cam_pos_6', 'position', 'x'), getObjTransform('cam_pos_6', 'position', 'y'), getObjTransform('cam_pos_6', 'position', 'z')]];

registerOnClick2({
        objSelector: 'grass_terrain',
        xRay: false,
        doubleClick: false,
        mouseButtons: '0,1,2',
        delay: 0.2,
        cbDo:function() {  teleportCamera(3,'LINEAR', 2, function() {});},
        cbIfMissedDo: function() {},
    });
registerOnClick2({
        objSelector: 'BezierCurve.011',
        xRay: false,
        doubleClick: false,
        mouseButtons: '0,1,2',
        delay: 0.2,
        cbDo:function() {  teleportCamera(3,'LINEAR', 2, function() {});},
        cbIfMissedDo: function() {},
    });

registerOnClick2({
        objSelector: 'ubi_1',
        xRay: false,
        doubleClick: false,
        mouseButtons: '0,1,2',
        delay: 0.2,
        cbDo:function() {  navigationFPS = true;
  setObjTransform('cam_pos_1', 'rotation', 0, getObjTransform('landscape_cam', 'rotation', 'y'), getObjTransform('landscape_cam', 'rotation', 'z'), false);
  setObjTransform('cam_pos_1', 'position', PositionsOfCameras[0][0], PositionsOfCameras[0][1], PositionsOfCameras[0][2], false);
  teleportCamera(3,'LINEAR', 2, function() {});},
        cbIfMissedDo: function() {},
    });
registerOnClick2({
        objSelector: 'ubi_2',
        xRay: false,
        doubleClick: false,
        mouseButtons: '0,1,2',
        delay: 0.2,
        cbDo:function() {  navigationFPS = true;
  setObjTransform('cam_pos_2', 'rotation', 0, getObjTransform('landscape_cam', 'rotation', 'y'), getObjTransform('landscape_cam', 'rotation', 'z'), false);
  setObjTransform('cam_pos_2', 'position', PositionsOfCameras[1][0], PositionsOfCameras[1][1], PositionsOfCameras[1][2], false);
  teleportCamera(3,'LINEAR', 2, function() {});},
        cbIfMissedDo: function() {},
    });
registerOnClick2({
        objSelector: 'ubi_3',
        xRay: false,
        doubleClick: false,
        mouseButtons: '0,1,2',
        delay: 0.2,
        cbDo:function() {  navigationFPS = true;
  setObjTransform('cam_pos_3', 'rotation', 0, getObjTransform('landscape_cam', 'rotation', 'y'), getObjTransform('landscape_cam', 'rotation', 'z'), false);
  setObjTransform('cam_pos_3', 'position', PositionsOfCameras[2][0], PositionsOfCameras[2][1], PositionsOfCameras[2][2], false);
  teleportCamera(3,'LINEAR', 2, function() {});},
        cbIfMissedDo: function() {},
    });

registerOnClick2({
        objSelector: 'ubi_4',
        xRay: false,
        doubleClick: false,
        mouseButtons: '0,1,2',
        delay: 0.2,
        cbDo:function() {  navigationFPS = true;
  setObjTransform('cam_pos_4', 'rotation', 0, getObjTransform('landscape_cam', 'rotation', 'y'), getObjTransform('landscape_cam', 'rotation', 'z'), false);
  setObjTransform('cam_pos_4', 'position', PositionsOfCameras[3][0], PositionsOfCameras[3][1], PositionsOfCameras[3][2], false);
  teleportCamera(3,'LINEAR', 2, function() {});},
        cbIfMissedDo: function() {},
    });
registerOnClick2({
        objSelector: 'ubi_5',
        xRay: false,
        doubleClick: false,
        mouseButtons: '0,1,2',
        delay: 0.2,
        cbDo:function() {  navigationFPS = true;
  setObjTransform('cam_pos_5', 'rotation', 0, getObjTransform('landscape_cam', 'rotation', 'y'), getObjTransform('landscape_cam', 'rotation', 'z'), false);
  setObjTransform('cam_pos_5', 'position', PositionsOfCameras[4][0], PositionsOfCameras[4][1], PositionsOfCameras[4][2], false);
  teleportCamera(3,'LINEAR', 2, function() {});},
        cbIfMissedDo: function() {},
    });

for (j = 1; j <= 34; j++) {
  if (j < 10) {

    operateAnimation('PLAY', 'share_00' + String(j), 1, 60, 'LoopRepeat', 1,
            function() {}, undefined, false);

        } else {

    operateAnimation('PLAY', 'share_0' + String(j), 1, 60, 'LoopRepeat', 1,
            function() {}, undefined, false);

        }
}

/* Control de iconos */
registerOnHover('fb_001', false, function() {

  operateAnimation('PLAY', 'fb_001', 129, 190, 'LoopRepeat', 1,
          function() {}, undefined, false);

      }, function() {

  operateAnimation('SET_FRAME', 'fb_001', 129, null, 'AUTO', 1,
          function() {}, undefined, false);

      });
registerOnHover('Linkedin_001', false, function() {

  operateAnimation('PLAY', 'Linkedin_001', 129, 190, 'LoopRepeat', 1,
          function() {}, undefined, false);

      }, function() {

  operateAnimation('SET_FRAME', 'Linkedin_001', 129, null, 'AUTO', 1,
          function() {}, undefined, false);

      });
registerOnHover('twitter_001', false, function() {

  operateAnimation('PLAY', 'twitter_001', 129, 190, 'LoopRepeat', 1,
          function() {}, undefined, false);

      }, function() {

  operateAnimation('SET_FRAME', 'twitter_001', 129, null, 'AUTO', 1,
          function() {}, undefined, false);

      });
registerOnHover('whats_001', false, function() {

  operateAnimation('PLAY', 'whats_001', 129, 190, 'LoopRepeat', 1,
          function() {}, undefined, false);

      }, function() {

  operateAnimation('SET_FRAME', 'whats_001', 129, null, 'AUTO', 1,
          function() {}, undefined, false);

      });

registerOnHover('ubi_1', false, function() {
  setMaterialColor('color_ubi_1', 'RGB', 0, 0.3, 1, '');

  operateAnimation('PLAY', 'anm_pos_1', null, null, 'LoopRepeat', 1,
          function() {}, undefined, false);

      }, function() {
  setMaterialColor('color_ubi_1', 'RGB', 1, 1, 1, '');

  operateAnimation('SET_FRAME', 'anm_pos_1', 1, null, 'AUTO', 1,
          function() {}, undefined, false);

      });
registerOnHover('ubi_2', false, function() {
  setMaterialColor('color_ubi_2', 'RGB', 0, 0.3, 1, '');

  operateAnimation('PLAY', 'anm_pos_2', null, null, 'LoopRepeat', 1,
          function() {}, undefined, false);

      }, function() {
  setMaterialColor('color_ubi_2', 'RGB', 1, 1, 1, '');

  operateAnimation('SET_FRAME', 'anm_pos_2', 1, null, 'AUTO', 1,
          function() {}, undefined, false);

      });
registerOnHover('ubi_3', false, function() {
  setMaterialColor('color_ubi_3', 'RGB', 0, 0.3, 1, '');

  operateAnimation('PLAY', 'anm_pos_3', null, null, 'LoopRepeat', 1,
          function() {}, undefined, false);

      }, function() {
  setMaterialColor('color_ubi_3', 'RGB', 1, 1, 1, '');

  operateAnimation('SET_FRAME', 'anm_pos_3', 1, null, 'AUTO', 1,
          function() {}, undefined, false);

      });
registerOnHover('ubi_4', false, function() {
  setMaterialColor('color_ubi_4', 'RGB', 0, 0.3, 1, '');

  operateAnimation('PLAY', 'anm_pos_4', null, null, 'LoopRepeat', 1,
          function() {}, undefined, false);

      }, function() {
  setMaterialColor('color_ubi_4', 'RGB', 1, 1, 1, '');

  operateAnimation('SET_FRAME', 'anm_pos_4', 1, null, 'AUTO', 1,
          function() {}, undefined, false);

      });
registerOnHover('ubi_5', false, function() {
  setMaterialColor('color_ubi_5', 'RGB', 0, 0.3, 1, '');

  operateAnimation('PLAY', 'anm_pos_5', null, null, 'LoopRepeat', 1,
          function() {}, undefined, false);

      }, function() {
  setMaterialColor('color_ubi_5', 'RGB', 1, 1, 1, '');

  operateAnimation('SET_FRAME', 'anm_pos_5', 1, null, 'AUTO', 1,
          function() {}, undefined, false);

      });

registerInterval(0.3, function() {
  getJSFunction('UpdatePositionPlayer')(getObjTransform('cam_pos_1', 'position', 'x'), getObjTransform('cam_pos_1', 'position', 'y'));
});

eventHTMLElem('click', 'location1', false, function(event) {
  navigationFPS = true;
  setHTMLElemStyle('filter', 'blur(8px)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
  registerSetTimeout(0.2, function() {
    setHTMLElemStyle('filter', 'blur(0px)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
    setObjTransform('cam_pos_1', 'position', PositionsOfCameras[0][0], PositionsOfCameras[0][1], PositionsOfCameras[0][2], false);
    setActiveCamera('cam_pos_1');
  });
});
eventHTMLElem('click', 'location2', false, function(event) {
  navigationFPS = true;
  setHTMLElemStyle('filter', 'blur(8px)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
  registerSetTimeout(0.2, function() {
    setHTMLElemStyle('filter', 'blur(0px)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
    setObjTransform('cam_pos_1', 'position', PositionsOfCameras[1][0], PositionsOfCameras[1][1], PositionsOfCameras[1][2], false);
    setActiveCamera('cam_pos_1');
  });
});
eventHTMLElem('click', 'location3', false, function(event) {
  navigationFPS = true;
  setHTMLElemStyle('filter', 'blur(8px)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
  registerSetTimeout(0.2, function() {
    setHTMLElemStyle('filter', 'blur(0px)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
    setObjTransform('cam_pos_1', 'position', PositionsOfCameras[2][0], PositionsOfCameras[2][1], PositionsOfCameras[2][2], false);
    setActiveCamera('cam_pos_1');
  });
});
eventHTMLElem('click', 'location4', false, function(event) {
  navigationFPS = true;
  setHTMLElemStyle('filter', 'blur(8px)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
  registerSetTimeout(0.2, function() {
    setHTMLElemStyle('filter', 'blur(0px)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
    setObjTransform('cam_pos_1', 'position', PositionsOfCameras[3][0], PositionsOfCameras[3][1], PositionsOfCameras[3][2], false);
    setActiveCamera('cam_pos_1');
  });
});

OpenMap = true;
eventHTMLElem('click', 'map', false, function(event) {
  if (OpenMap) {
    setHTMLElemStyle('display', 'none', 'hideElement', false);
    OpenMap = false;
  } else {
    setHTMLElemStyle('display', 'flex', 'hideElement', false);
    OpenMap = true;
  }
});

eventHTMLElem('click', 'location5', false, function(event) {
  navigationFPS = true;
  setHTMLElemStyle('filter', 'blur(8px)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
  registerSetTimeout(0.2, function() {
    setHTMLElemStyle('filter', 'blur(0px)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
    setObjTransform('cam_pos_1', 'position', PositionsOfCameras[4][0], PositionsOfCameras[4][1], PositionsOfCameras[4][2], false);
    setActiveCamera('cam_pos_1');
  });
});
eventHTMLElem('click', 'location6', false, function(event) {
  navigationFPS = true;
  setHTMLElemStyle('filter', 'blur(8px)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
  registerSetTimeout(0.2, function() {
    setHTMLElemStyle('filter', 'blur(0px)', ['QUERYSELECTOR', '#v3d-container > canvas'], false);
    setObjTransform('cam_pos_1', 'position', PositionsOfCameras[5][0], PositionsOfCameras[5][1], PositionsOfCameras[5][2], false);
    setActiveCamera('cam_pos_1');
  });
});

JsonUrls = getJSFunction('GetURLJson')();
registerOnClick(['ALL_OBJECTS'], false, false, [0,1,2], function() {
  VerifcarIconoStand(_pGlob.pickedObject);
}, function() {});

'css_pos_6x10_v2_040';



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
